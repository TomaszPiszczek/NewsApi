name: Deploy App

on:
  pull_request:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Validate PEM key
        run: |
          echo "${{ secrets.AWS_PEM }}" > key.pem
          chmod 600 key.pem

      - name: Ensure Docker network exists on EC2
        run: |
          ssh -i key.pem -o StrictHostKeyChecking=no ec2-user@51.20.68.13 << EOF
            docker network inspect my-network >/dev/null 2>&1 || docker network create my-network
          EOF

      - name: Ensure app directory exists on EC2
        run: |
          ssh -i key.pem -o StrictHostKeyChecking=no ec2-user@51.20.68.13 << EOF
            mkdir -p ~/app
          EOF

      - name: Build frontend
        run: |
          cd UI
          npm install
          npm run build

      - name: Copy frontend build to backend static folder
        run: |
          rm -rf src/main/resources/static/*
          cp -r UI/dist/* src/main/resources/static/

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Verify build outputs
        run: |
          ls -lh target/*.jar
          ls -lh Dockerfile

      - name: Push application files to EC2
        run: |
          scp -i key.pem -o StrictHostKeyChecking=no target/*.jar ec2-user@51.20.68.13:~/app/
          scp -i key.pem -o StrictHostKeyChecking=no Dockerfile ec2-user@51.20.68.13:~/app/

      - name: List files in ~/app on EC2
        run: |
          ssh -i key.pem -o StrictHostKeyChecking=no ec2-user@51.20.68.13 << EOF
            ls -lh ~/app
          EOF

      - name: Rename JAR file on EC2
        run: |
          ssh -i key.pem -o StrictHostKeyChecking=no ec2-user@51.20.68.13 << EOF
            JAR_FILE=\$(ls ~/app/*.jar 2>/dev/null | head -n 1)
            if [ -z "\$JAR_FILE" ]; then
              echo "No JAR file found in ~/app"
              exit 1
            else
              mv "\$JAR_FILE" ~/app/app.jar
            fi
          EOF

      - name: Stop and remove existing container
        run: |
          ssh -i key.pem -o StrictHostKeyChecking=no ec2-user@51.20.68.13 << EOF
            if docker ps -a --format '{{.Names}}' | grep -q '^spring-boot-container$'; then
              docker stop spring-boot-container || true
              docker rm spring-boot-container || true
            fi
          EOF

      - name: Run Docker container on EC2
        run: |
          ssh -i key.pem -o StrictHostKeyChecking=no ec2-user@51.20.68.13 << EOF
            cd ~/app/
            docker build -t my-spring-boot-app .
            docker run -d --network my-network -p 8080:8080 --name spring-boot-container my-spring-boot-app
          EOF

      - name: Test container status on EC2
        run: |
          ssh -i key.pem -o StrictHostKeyChecking=no ec2-user@51.20.68.13 << EOF
            docker ps | grep spring-boot-container || exit 1
            docker logs spring-boot-container
          EOF
